# The aim of this docker compose file is to provide a good known
# way to build your docker-compose file for Anomaly projects
# 
# This file provides you a template for your development environment

# https://docs.docker.com/compose/compose-file/compose-versioning/
version: "3.8"

volumes:
  postgres-data:
  redis-data:
  fluentd-data:
  minio-data:

services:

  # Postgres:
  # - In development we read secrets from .env.development
  #   refer to the production config to see how to use secrets
  #   via Kubernetes
  db:
    image: postgres:14-bullseye
    container_name: ${PROJ_NAME}-postgres
    # Expose for development purposes
    ports:
      - "5432:5432"
    restart: unless-stopped
    env_file:
      - .env.development
    volumes:
      - postgres-data:/var/lib/postgresql/data/

  # Redis:
  # - In development we read secrets from .env.development
  #   used by Clerey to broker tasks between the api endpoints
  #   and worker tasks
  redis:
    image: redis:7-bullseye
    container_name: ${PROJ_NAME}-redis
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # fluent-bit:
  #   image: fluent/fluent-bit:1.5
  #   container_name: ${PROJ_NAME}-fluentbit
  #   restart: unless-stopped

  # Applicaiton API:
  # - In development we read secrets from .env.development
  # - Provides a FastAPI based API that runs using uvicorn in development
  api:
    container_name: ${PROJ_NAME}-api
    build:
      context: .
      dockerfile: Dockerfile.api
    env_file:
      - .env.development
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./src/labs:/opt/labs


  # Worker: is a celery based worker process that runs in the background
  worker:
    container_name: ${PROJ_NAME}-worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    env_file:
      - .env.development
    restart: unless-stopped
    volumes:
      - ./src/labs:/opt/labs

  # MinIO server used during development, replaced by object store in prod
  minio:
    image: minio/minio
    container_name: ${PROJ_NAME}-minio
    restart: unless-stopped
    hostname: s3.${PROJ_DOMAIN}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.development
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3