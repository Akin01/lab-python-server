# The aim of this docker compose file is to provide a good known
# way to build your docker-compose file for Anomaly projects
# 
# Before you use this template have a look at the README, note that
# you will require PROJ_NAME and PROJ_FQDN setup in your environment
# for these template to work
# 
# This file provides you a template for your development environment
# https://docs.docker.com/compose/compose-file/compose-versioning/
version: "3.8"

volumes:
  postgres-data:
  redis-data:
  minio-data:

services:

  # Postgres:
  # - In development we read secrets from .env.development
  #   refer to the production config to see how to use secrets
  #   via Kubernetes
  db:
    image: postgres:14-bullseye
    container_name: ${PROJ_NAME}-postgres
    # Expose for development purposes
    ports:
      - "5432:5432"
    restart: unless-stopped
    env_file:
      - .env.development
    volumes:
      - postgres-data:/var/lib/postgresql/data/

  # RabbitMQ:
  # TaskIQ recommend using rabbitmq for the broker
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: ${PROJ_NAME}-rabbitmq
    restart: unless-stopped
    env_file:
      - .env.development
    ports:
      - 8080:15672

  # Redis:
  # TaskIQ recommend using redis as the task result backend
  redis:
    image: redis:7-bullseye
    container_name: ${PROJ_NAME}-redis
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Applicaiton API:
  # - In development we read secrets from .env.development
  # - Provides a FastAPI based API that runs using uvicorn in development
  api:
    container_name: ${PROJ_NAME}-api
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "${PROJ_NAME}.api:app", "--host=0.0.0.0", "--port=80", "--root-path=/api", "--reload"]
    env_file:
      - .env.development
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./src/${PROJ_NAME}:/opt/${PROJ_NAME}
      - ./src/tests:/opt/tests # Mount it so we can keep modifying tests
    depends_on:
      - db
      - redis
      - rabbitmq

  # TaskIQ worker
  # worker:
  #   container_name: ${PROJ_NAME}-worker
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: ["taskiq", "worker", "${PROJ_NAME}.broker:broker"]
  #   env_file:
  #     - .env.development
  #   restart: unless-stopped
  #   volumes:
  #     - ./src/${PROJ_NAME}:/opt/${PROJ_NAME}
  #   depends_on:
  #     - db
  #     - redis
  #     - rabbitmq

  # MinIO server used during development, replaced by object store in prod
  minio:
    image: minio/minio
    container_name: ${PROJ_NAME}-minio
    restart: unless-stopped
    hostname: s3.${PROJ_FQDN}
    volumes:
      - minio-data:/data
      - .cert:/root/.minio/certs
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - .env.development
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc
    container_name: ${PROJ_NAME}-createbuckets
    depends_on:
      - minio
    env_file:
      - .env.development
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add devel http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb -p devel/devel;
      /usr/bin/mc policy set download devel/devel;
      exit 0;
      "
