version: '3'

dotenv: ['.env']

tasks:
  build:image:
    desc: builds a publishable docker image
    cmds:
      - docker build -t anomalyhq/python-lab-server-api:v{{.PROJ_VER}} -f Dockerfile.api .
  dev:test:
    desc: runs tests inside the server container
    summary: |
      Uses pytest to run a set of extensive test suites for the project 
    cmds:
      - docker compose exec api sh -c "pytest"
  dev:pyshell:
    desc: get a python session on the api container
    cmds:
      - docker compose exec api sh -c "python"
  dev:psql:
    desc: postgres shell on the db container
    cmds:
      - docker compose exec db sh -c "psql -U postgres"
  dev:sh:
    desc: get a bash session on the api container
    cmds:
      - docker compose exec api sh -c "bash"
  dev:qwatch:
    desc: get a list of celery events
    cmds:
      - docker compose exec api sh -c "celery -A {{.PROJ_NAME}}.celery:app events"
  crypt:hash:
    desc: generate a random cryptographic hash
    cmds:
      - openssl rand -hex {{.CLI_ARGS}}
  db:init:
    desc: initialise the database schema
    cmds:
      - docker compose exec api sh -c "poetry run initdb"
  db:rev:
    desc: create a database migration, pass a string as commit string
    cmds:
      - docker compose exec api sh -c "alembic -c /opt/$PROJ_NAME/alembic.ini revision --autogenerate -m {{.CLI_ARGS}}"
  db:migrate:
    desc: migrates models to HEAD
    cmds:
      - docker compose exec api sh -c "alembic -c /opt/$PROJ_NAME/alembic.ini upgrade head"
  eject:
    desc: eject the project from a template
    summary: |
      This process will remove any references to the Anomaly labs template, 
      it specifically will set the package name to your project name, fix
      any references in configuration files to the labs project.

      Finally it will remove references to all alembic migrations 

      Ejecting the template should only ever be done once! 
    cmds: 
      - rm src/labs/alembic/versions/*.py
      - FROM="labs"; TO=$PROJ_NAME; for FROM_DIR in `find . -name $FROM`; do if [ -d $FROM_DIR ]; then TARGET_DIR=`echo $FROM_DIR | sed "s/$FROM/$TO/g"`; echo $FROM_DIR ">" $TARGET_DIR; mv $FROM_DIR $TARGET_DIR; fi ; done; for SRC_FILE in `ls **/*.py **/Makefile **/*.yml **/Dockerfile **/*.dockerfile **/alembic.ini **/.env* **/README.md `; do sed -i '' "s/$FROM/$TO/g" $SRC_FILE; done
    status:
      - test $PROJ_NAME != "labs"